// commands/loop.js
const { SlashCommandBuilder } = require('discord.js');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('loop')
    .setDescription('–ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è —Ä–µ–∂–∏–º—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è')
    .addStringOption(option =>
      option.setName('—Ä–µ–∂–∏–º')
        .setDescription('–†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è')
        .setRequired(false)
        .addChoices(
          { name: '–≤–∏–º–∫–Ω–µ–Ω–æ', value: 'off' },
          { name: '–ø—ñ—Å–Ω—è', value: 'song' },
          { name: '—á–µ—Ä–≥–∞', value: 'queue' }
        )),
  
  async execute(interaction, client) {
    // –û—Ç—Ä–∏–º—É—î–º–æ DisTube –∑ client
    const distube = client.distube;
    
    const queue = distube.getQueue(interaction.guildId);
    if (!queue) return interaction.reply('–ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≤—ñ–¥—Ç–≤–æ—Ä—é—î—Ç—å—Å—è!');
    
    let mode = 0;
    const option = interaction.options.getString('—Ä–µ–∂–∏–º');
    
    if (option) {
      switch (option) {
        case 'off':
          mode = 0;
          break;
        case 'song':
          mode = 1;
          break;
        case 'queue':
          mode = 2;
          break;
      }
    } else {
      // –¶–∏–∫–ª—ñ—á–Ω–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–Ω—è —Ä–µ–∂–∏–º—ñ–≤, —è–∫—â–æ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ –≤–∫–∞–∑–∞–Ω–æ
      mode = (queue.repeatMode + 1) % 3;
    }
    
    const modeMap = {
      0: '–í–∏–º–∫–Ω–µ–Ω–æ',
      1: '–ü—ñ—Å–Ω—è',
      2: '–ß–µ—Ä–≥–∞'
    };
    
    try {
      queue.setRepeatMode(mode);
      await interaction.reply(`üîÑ –†–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: **${modeMap[mode]}**`);
    } catch (error) {
      console.error(error);
      await interaction.reply({
        content: '–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø—Ä–æ–±—ñ –∑–º—ñ–Ω–∏—Ç–∏ —Ä–µ–∂–∏–º –ø–æ–≤—Ç–æ—Ä–µ–Ω–Ω—è.',
        ephemeral: true
      });
    }
  }
};