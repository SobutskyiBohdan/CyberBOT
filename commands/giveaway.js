const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const ms = require('ms');
const fs = require('fs');
const path = require('path');

// –®–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É –∑ –∞–∫—Ç–∏–≤–Ω–∏–º–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à–∞–º–∏
const giveawaysPath = path.join(__dirname, '../data/giveaways.json');

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
function loadGiveaways() {
  if (fs.existsSync(giveawaysPath)) {
    return JSON.parse(fs.readFileSync(giveawaysPath, 'utf8'));
  }
  return [];
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤
function saveGiveaways(giveaways) {
  // –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é, —è–∫—â–æ –≤–æ–Ω–∞ –Ω–µ —ñ—Å–Ω—É—î
  const dir = path.dirname(giveawaysPath);
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  fs.writeFileSync(giveawaysPath, JSON.stringify(giveaways, null, 2));
}

module.exports = {
  data: new SlashCommandBuilder()
    .setName('giveaway')
    .setDescription('–û—Ä–≥–∞–Ω—ñ–∑–æ–≤—É—î —Ä–æ–∑—ñ–≥—Ä–∞—à –ø—Ä–∏–∑—ñ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ')
    .addSubcommand(subcommand =>
      subcommand
        .setName('start')
        .setDescription('–ü–æ—á–∞—Ç–∏ –Ω–æ–≤–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à')
        .addStringOption(option => 
          option.setName('—á–∞—Å')
            .setDescription('–¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ä–æ–∑—ñ–≥—Ä–∞—à—É (30s, 5m, 1h, 2d, —Ç–æ—â–æ)')
            .setRequired(true))
        .addIntegerOption(option => 
          option.setName('–ø–µ—Ä–µ–º–æ–∂—Ü—ñ')
            .setDescription('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')
            .setRequired(true)
            .setMinValue(1))
        .addStringOption(option => 
          option.setName('–ø—Ä–∏–∑')
            .setDescription('–ü—Ä–∏–∑, —è–∫–∏–π –±—É–¥–µ —Ä–æ–∑—ñ–≥—Ä–∞–Ω–æ')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('end')
        .setDescription('–ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–æ–∑—ñ–≥—Ä–∞—à –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ')
        .addStringOption(option => 
          option.setName('message_id')
            .setDescription('ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º')
            .setRequired(true)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('reroll')
        .setDescription('–ü–µ—Ä–µ–≤–∏–∑–Ω–∞—á–∏—Ç–∏ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É')
        .addStringOption(option => 
          option.setName('message_id')
            .setDescription('ID –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–æ–∑—ñ–≥—Ä–∞—à–µ–º')
            .setRequired(true))
        .addIntegerOption(option => 
          option.setName('–ø–µ—Ä–µ–º–æ–∂—Ü—ñ')
            .setDescription('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –Ω–æ–≤–∏—Ö –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤')
            .setRequired(false)
            .setMinValue(1)))
    .addSubcommand(subcommand =>
      subcommand
        .setName('list')
        .setDescription('–ü–æ–∫–∞–∑–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤'))
    .setDefaultMemberPermissions(0x0000000000000020), // MANAGE_GUILD permission
  
  async execute(interaction) {
    const subCommand = interaction.options.getSubcommand();

    switch (subCommand) {
      case 'start': {
        const durationStr = interaction.options.getString('—á–∞—Å');
        const winners = interaction.options.getInteger('–ø–µ—Ä–µ–º–æ–∂—Ü—ñ');
        const prize = interaction.options.getString('–ø—Ä–∏–∑');
        
        const duration = ms(durationStr);
        if (!duration) {
          return interaction.reply({ 
            content: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π —á–∞—Å (30s, 5m, 1h, 2d, —Ç–æ—â–æ)', 
            ephemeral: true 
          });
        }
        
        try {
          const endTime = Date.now() + duration;
          const giveawayEmbed = new EmbedBuilder()
            .setColor('#FF9900')
            .setTitle('üéâ –†–û–ó–Ü–ì–†–ê–®! üéâ')
            .setDescription(`**–ü—Ä–∏–∑: ${prize}**\n\n–†–µ–∞–≥—É–π—Ç–µ –Ω–∞ üéâ, —â–æ–± –≤–∑—è—Ç–∏ —É—á–∞—Å—Ç—å!\n–ß–∞—Å –∑–∞–∫—ñ–Ω—á–µ–Ω–Ω—è: <t:${Math.floor(endTime / 1000)}:R>\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤: ${winners}`)
            .setFooter({ text: `–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: ${interaction.user.tag} ‚Ä¢ ID: ${interaction.id}`, iconURL: interaction.user.displayAvatarURL() })
            .setTimestamp();

          await interaction.reply('–°—Ç–≤–æ—Ä—é—é —Ä–æ–∑—ñ–≥—Ä–∞—à...');
          const giveawayMessage = await interaction.channel.send({ embeds: [giveawayEmbed] });
          await giveawayMessage.react('üéâ');

          // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–∑—ñ–≥—Ä–∞—à
          const giveaways = loadGiveaways();
          giveaways.push({
            messageId: giveawayMessage.id,
            channelId: interaction.channel.id,
            guildId: interaction.guild.id,
            prize,
            winners,
            endTime,
            hostId: interaction.user.id,
            ended: false
          });
          saveGiveaways(giveaways);

          // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
          setTimeout(() => {
            endGiveaway(interaction.client, giveawayMessage.id);
          }, duration);

          await interaction.editReply(`–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–ø—É—â–µ–Ω–æ! –ó–∞–∫—ñ–Ω—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ ${durationStr}.`);
        } catch (error) {
          console.error('Error starting giveaway:', error);
          await interaction.reply({ 
            content: `‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É —Ä–æ–∑—ñ–≥—Ä–∞—à—É: ${error.message}`, 
            ephemeral: true 
          });
        }
        break;
      }

      case 'end': {
        const messageId = interaction.options.getString('message_id');
        await interaction.deferReply({ ephemeral: true });
        
        const result = await endGiveaway(interaction.client, messageId);
        if (result) {
          await interaction.editReply('–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ –¥–æ—Å—Ç—Ä–æ–∫–æ–≤–æ.');
        } else {
          await interaction.editReply('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ –≤–∫–∞–∑–∞–Ω–∏–º ID.');
        }
        break;
      }

      case 'reroll': {
        const messageId = interaction.options.getString('message_id');
        const rerollWinners = interaction.options.getInteger('–ø–µ—Ä–µ–º–æ–∂—Ü—ñ') || 1;
        
        await interaction.deferReply({ ephemeral: true });
        const result = await rerollGiveaway(interaction.client, messageId, rerollWinners);
        
        if (result) {
          await interaction.editReply(`–ü–µ—Ä–µ—Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∏–∫–æ–Ω–∞–Ω–æ –¥–ª—è ${rerollWinners} –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤.`);
        } else {
          await interaction.editReply('–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π —Ä–æ–∑—ñ–≥—Ä–∞—à –∑ –≤–∫–∞–∑–∞–Ω–∏–º ID.');
        }
        break;
      }

      case 'list': {
        const giveaways = loadGiveaways().filter(g => !g.ended && g.guildId === interaction.guild.id);
        
        if (giveaways.length === 0) {
          return interaction.reply('–ù–∞ —Ü—å–æ–º—É —Å–µ—Ä–≤–µ—Ä—ñ –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤.');
        }

        const listEmbed = new EmbedBuilder()
          .setColor('#FF9900')
          .setTitle('üìã –ê–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ')
          .setDescription(giveaways.map(g => 
            `**–ü—Ä–∏–∑:** ${g.prize}\n**–ü–µ—Ä–µ–º–æ–∂—Ü—ñ–≤:** ${g.winners}\n**–ó–∞–∫—ñ–Ω—á—É—î—Ç—å—Å—è:** <t:${Math.floor(g.endTime / 1000)}:R>\n**ID:** ${g.messageId}\n`
          ).join('\n'))
          .setTimestamp();

        await interaction.reply({ embeds: [listEmbed] });
        break;
      }
    }
  },
};

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
async function endGiveaway(client, messageId) {
  const giveaways = loadGiveaways();
  const giveawayIndex = giveaways.findIndex(g => g.messageId === messageId);

  if (giveawayIndex === -1) return false;

  const giveaway = giveaways[giveawayIndex];
  if (giveaway.ended) return false;

  giveaway.ended = true;
  saveGiveaways(giveaways);

  try {
    const guild = client.guilds.cache.get(giveaway.guildId);
    if (!guild) return false;

    const channel = guild.channels.cache.get(giveaway.channelId);
    if (!channel) return false;

    const message = await channel.messages.fetch(giveaway.messageId);
    if (!message) return false;

    const reaction = message.reactions.cache.get('üéâ');
    if (!reaction) return false;

    // –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    await reaction.users.fetch();
    const participants = reaction.users.cache.filter(u => !u.bot);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    const winners = [];
    if (participants.size > 0) {
      const participantsArray = Array.from(participants.values());
      for (let i = 0; i < Math.min(giveaway.winners, participants.size); i++) {
        const winnerIndex = Math.floor(Math.random() * participantsArray.length);
        winners.push(participantsArray[winnerIndex]);
        participantsArray.splice(winnerIndex, 1);
      }
    }

    // –û–Ω–æ–≤–ª—é—î–º–æ –µ–º–±–µ–¥
    const endEmbed = new EmbedBuilder()
      .setColor(winners.length > 0 ? '#00FF00' : '#FF0000')
      .setTitle('üéâ –†–û–ó–Ü–ì–†–ê–® –ó–ê–í–ï–†–®–ï–ù–û! üéâ')
      .setDescription(`**–ü—Ä–∏–∑: ${giveaway.prize}**\n\n${winners.length > 0 
        ? `–ü–µ—Ä–µ–º–æ–∂—Ü—ñ: ${winners.map(w => `<@${w.id}>`).join(', ')}` 
        : '–ù–µ–º–∞—î –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤! –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤.'}`)
      .setFooter({ text: `–û—Ä–≥–∞–Ω—ñ–∑–∞—Ç–æ—Ä: ${(await guild.members.fetch(giveaway.hostId)).user.tag} ‚Ä¢ ID: ${giveaway.messageId}`, iconURL: (await guild.members.fetch(giveaway.hostId)).user.displayAvatarURL() })
      .setTimestamp();

    await message.edit({ embeds: [endEmbed] });

    // –û–≥–æ–ª–æ—à—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    if (winners.length > 0) {
      channel.send({
        content: `–í—ñ—Ç–∞—î–º–æ ${winners.map(w => `<@${w.id}>`).join(', ')}! –í–∏ –≤–∏–≥—Ä–∞–ª–∏ **${giveaway.prize}**!`,
        allowedMentions: { users: winners.map(w => w.id) }
      });
    } else {
      channel.send('–†–æ–∑—ñ–≥—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤!');
    }
    
    return true;
  } catch (error) {
    console.error('Error ending giveaway:', error);
    return false;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ—Ä–æ–∑—ñ–≥—Ä–∞—à—É
async function rerollGiveaway(client, messageId, winnersCount) {
  const giveaways = loadGiveaways();
  const giveaway = giveaways.find(g => g.messageId === messageId);

  if (!giveaway || !giveaway.ended) return false;

  try {
    const guild = client.guilds.cache.get(giveaway.guildId);
    if (!guild) return false;

    const channel = guild.channels.cache.get(giveaway.channelId);
    if (!channel) return false;

    const message = await channel.messages.fetch(giveaway.messageId);
    if (!message) return false;

    const reaction = message.reactions.cache.get('üéâ');
    if (!reaction) return false;

    // –û—Ç—Ä–∏–º—É—î–º–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ —Ä–æ–∑—ñ–≥—Ä–∞—à—É
    await reaction.users.fetch();
    const participants = reaction.users.cache.filter(u => !u.bot);

    // –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    const winners = [];
    if (participants.size > 0) {
      const participantsArray = Array.from(participants.values());
      for (let i = 0; i < Math.min(winnersCount, participants.size); i++) {
        const winnerIndex = Math.floor(Math.random() * participantsArray.length);
        winners.push(participantsArray[winnerIndex]);
        participantsArray.splice(winnerIndex, 1);
      }
    }

    // –û–≥–æ–ª–æ—à—É—î–º–æ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤
    if (winners.length > 0) {
      channel.send({
        content: `üéâ **–ü–ï–†–ï–†–û–ó–Ü–ì–†–ê–®** üéâ\n–ù–æ–≤—ñ –ø–µ—Ä–µ–º–æ–∂—Ü—ñ –¥–ª—è –ø—Ä–∏–∑—É **${giveaway.prize}**: ${winners.map(w => `<@${w.id}>`).join(', ')}!`,
        allowedMentions: { users: winners.map(w => w.id) }
      });
    } else {
      channel.send('–ü–µ—Ä–µ—Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∏–∫–æ–Ω–∞–Ω–æ, –∞–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ —É—á–∞—Å–Ω–∏–∫—ñ–≤ –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä–µ–º–æ–∂—Ü—ñ–≤!');
    }
    
    return true;
  } catch (error) {
    console.error('Error rerolling giveaway:', error);
    return false;
  }
}

// –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑—ñ–≥—Ä–∞—à—ñ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞
module.exports.init = async (client) => {
  const giveaways = loadGiveaways();
  const now = Date.now();

  for (const giveaway of giveaways) {
    if (!giveaway.ended) {
      const timeLeft = giveaway.endTime - now;
      
      if (timeLeft <= 0) {
        // –Ø–∫—â–æ —Ä–æ–∑—ñ–≥—Ä–∞—à –≤–∂–µ –º–∞–≤ –∑–∞–∫—ñ–Ω—á–∏—Ç–∏—Å—è
        endGiveaway(client, giveaway.messageId);
      } else {
        // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–∞–π–º–µ—Ä –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–æ–∑—ñ–≥—Ä–∞—à—É
        setTimeout(() => {
          endGiveaway(client, giveaway.messageId);
        }, timeLeft);
      }
    }
  }
};