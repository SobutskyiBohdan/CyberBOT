// commands/lyrics.js
const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');
const fetch = require('node-fetch');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('lyrics')
    .setDescription('–ü–æ–∫–∞–∑—É—î —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ, —è–∫–∞ –∑–∞—Ä–∞–∑ –≥—Ä–∞—î –∞–±–æ –≤–∫–∞–∑–∞–Ω–æ—ó –ø—ñ—Å–Ω—ñ')
    .addStringOption(option => 
      option.setName('–∑–∞–ø–∏—Ç')
        .setDescription('–ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ: "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ")')
        .setRequired(false)),
  
  async execute(interaction, client) {
    await interaction.deferReply();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∫–∞–∑–∞–Ω–æ –∑–∞–ø–∏—Ç –∞–±–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω—É –ø—ñ—Å–Ω—é
    let songQuery;
    let currentSong = false;
    
    const queryOption = interaction.options.getString('–∑–∞–ø–∏—Ç');
    
    if (!queryOption) {
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –ø–æ—Ç–æ—á–Ω—É –ø—ñ—Å–Ω—é
      const serverQueue = client.queue.get(interaction.guild.id);
      if (!serverQueue || !serverQueue.songs[0]) {
        return interaction.followUp('–ó–∞—Ä–∞–∑ –Ω—ñ—á–æ–≥–æ –Ω–µ –≥—Ä–∞—î! –í–∫–∞–∂—ñ—Ç—å –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ –≤ –∫–æ–º–∞–Ω–¥—ñ.');
      }
      songQuery = serverQueue.songs[0].title;
      currentSong = true;
    } else {
      songQuery = queryOption;
    }

    try {
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—à—É–∫
      await interaction.followUp(`üîç –®—É–∫–∞—é —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ –¥–ª—è "${songQuery}"...`);

      // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ API –¥–ª—è –ø–æ—à—É–∫—É —Ç–µ–∫—Å—Ç—ñ–≤ –ø—ñ—Å–µ–Ω—å (–ø—Ä–∏–∫–ª–∞–¥ API - –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω–∏–π)
      const response = await fetch(`https://api.lyrics.ovh/v1/${encodeURIComponent(songQuery.split(' - ')[0])}/${encodeURIComponent(songQuery.split(' - ')[1] || songQuery)}`);
      
      if (!response.ok) {
        await interaction.editReply(`‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ –¥–ª—è "${songQuery}". –°–ø—Ä–æ–±—É–π—Ç–µ –≤–∫–∞–∑–∞—Ç–∏ –∞—Ä—Ç–∏—Å—Ç–∞ —Ç–∞ –Ω–∞–∑–≤—É –ø—ñ—Å–Ω—ñ —á–µ—Ä–µ–∑ –¥–µ—Ñ—ñ—Å (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: "–ê—Ä—Ç–∏—Å—Ç - –ù–∞–∑–≤–∞ –ø—ñ—Å–Ω—ñ").`);
        return;
      }

      const data = await response.json();
      let lyrics = data.lyrics;

      // –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–ø–∞–¥–æ–∫, –∫–æ–ª–∏ —Ç–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π
      if (lyrics.length > 4000) {
        lyrics = lyrics.substring(0, 3997) + '...';
      }

      // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–º–±–µ–¥ –∑ —Ç–µ–∫—Å—Ç–æ–º –ø—ñ—Å–Ω—ñ
      const lyricsEmbed = new EmbedBuilder()
        .setColor('#1DB954')
        .setTitle(`üìù –¢–µ–∫—Å—Ç –ø—ñ—Å–Ω—ñ: ${songQuery}`)
        .setDescription(lyrics)
        .setFooter({ text: currentSong ? '–ü–æ—Ç–æ—á–Ω–∞ –ø—ñ—Å–Ω—è' : '–ó–∞–ø–∏—Ç–∞–Ω–∞ –ø—ñ—Å–Ω—è', iconURL: interaction.user.displayAvatarURL() })
        .setTimestamp();

      await interaction.editReply({ content: null, embeds: [lyricsEmbed] });
    } catch (error) {
      console.error('Error fetching lyrics:', error);
      interaction.editReply(`‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ—à—É–∫—É —Ç–µ–∫—Å—Ç—É –ø—ñ—Å–Ω—ñ: ${error.message}`);
    }
  }
};